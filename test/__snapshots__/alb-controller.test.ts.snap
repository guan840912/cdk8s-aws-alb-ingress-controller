// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AlbIngressController 1`] = `
Array [
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "labels": Object {
        "app.kubernetes.io/name": "alb-ingress-controller",
      },
      "name": "alb-ingress-controller",
    },
    "rules": Array [
      Object {
        "apiGroups": Array [
          "",
          "extensions",
        ],
        "resources": Array [
          "configmaps",
          "endpoints",
          "events",
          "ingresses",
          "ingresses/status",
          "services",
          "pods/status",
        ],
        "verbs": Array [
          "create",
          "get",
          "list",
          "update",
          "watch",
          "patch",
        ],
      },
      Object {
        "apiGroups": Array [
          "",
          "extensions",
        ],
        "resources": Array [
          "nodes",
          "pods",
          "secrets",
          "services",
          "namespaces",
        ],
        "verbs": Array [
          "get",
          "list",
          "watch",
        ],
      },
    ],
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "labels": Object {
        "app.kubernetes.io/name": "alb-ingress-controller",
      },
      "name": "alb-ingress-controller",
    },
    "roleRef": Object {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "ClusterRole",
      "name": "alb-ingress-controller",
    },
    "subjects": Array [
      Object {
        "kind": "ServiceAccount",
        "name": "alb-ingress-controller",
        "namespace": "kube-system",
      },
    ],
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "name": "alb-ingress-controller",
      "namespace": "kube-system",
    },
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "labels": Object {
        "app.kubernetes.io/name": "alb-ingress-controller",
      },
      "name": "alb-ingress-controller",
      "namespace": "kube-system",
    },
    "spec": Object {
      "replicas": 0,
      "selector": Object {
        "matchLabels": Object {
          "app.kubernetes.io/name": "alb-ingress-controller",
        },
      },
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/name": "alb-ingress-controller",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "args": Array [
                "--ingress-class=alb",
                "--cluster-name=TestClusterName",
                "--test=123",
              ],
              "env": Array [
                Object {
                  "name": "testEnv",
                  "value": "12345",
                },
              ],
              "image": "docker.io/amazon/aws-alb-ingress-controller:v1.1.9",
              "name": "alb-ingress-controller",
            },
          ],
          "serviceAccountName": "alb-ingress-controller",
        },
      },
    },
  },
  Object {
    "apiVersion": "apiextensions.k8s.io/v1beta1",
    "kind": "CustomResourceDefinition",
    "metadata": Object {
      "annotations": Object {
        "controller-gen.kubebuilder.io/version": "v0.4.0",
      },
      "labels": Object {
        "app.kubernetes.io/name": "aws-load-balancer-controller",
      },
      "name": "targetgroupbindings.elbv2.k8s.aws",
    },
    "spec": Object {
      "additionalPrinterColumns": Array [
        Object {
          "JSONPath": ".spec.serviceRef.name",
          "description": "The Kubernetes Service's name",
          "name": "SERVICE-NAME",
          "type": "string",
        },
        Object {
          "JSONPath": ".spec.serviceRef.port",
          "description": "The Kubernetes Service's port",
          "name": "SERVICE-PORT",
          "type": "string",
        },
        Object {
          "JSONPath": ".spec.targetType",
          "description": "The AWS TargetGroup's TargetType",
          "name": "TARGET-TYPE",
          "type": "string",
        },
        Object {
          "JSONPath": ".spec.targetGroupARN",
          "description": "The AWS TargetGroup's Amazon Resource Name",
          "name": "ARN",
          "priority": 1,
          "type": "string",
        },
        Object {
          "JSONPath": ".metadata.creationTimestamp",
          "name": "AGE",
          "type": "date",
        },
      ],
      "group": "elbv2.k8s.aws",
      "names": Object {
        "categories": Array [
          "all",
        ],
        "kind": "TargetGroupBinding",
        "listKind": "TargetGroupBindingList",
        "plural": "targetgroupbindings",
        "singular": "targetgroupbinding",
      },
      "scope": "Namespaced",
      "subresources": Object {
        "status": Object {},
      },
      "validation": Object {
        "openAPIV3Schema": Object {
          "description": "TargetGroupBinding is the Schema for the TargetGroupBinding API",
          "properties": Object {
            "apiVersion": Object {
              "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type": "string",
            },
            "kind": Object {
              "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type": "string",
            },
            "metadata": Object {
              "type": "object",
            },
            "spec": Object {
              "description": "TargetGroupBindingSpec defines the desired state of TargetGroupBinding",
              "properties": Object {
                "networking": Object {
                  "description": "networking provides the networking setup for ELBV2 LoadBalancer to access targets in TargetGroup.",
                  "properties": Object {
                    "ingress": Object {
                      "description": "List of ingress rules to allow ELBV2 LoadBalancer to access targets in TargetGroup.",
                      "items": Object {
                        "properties": Object {
                          "from": Object {
                            "description": "List of peers which should be able to access the targets in TargetGroup. At least one NetworkingPeer should be specified.",
                            "items": Object {
                              "description": "NetworkingPeer defines the source/destination peer for networking rules.",
                              "properties": Object {
                                "ipBlock": Object {
                                  "description": "IPBlock defines an IPBlock peer. If specified, none of the other fields can be set.",
                                  "properties": Object {
                                    "cidr": Object {
                                      "description": "CIDR is the network CIDR. Both IPV4 or IPV6 CIDR are accepted.",
                                      "type": "string",
                                    },
                                  },
                                  "required": Array [
                                    "cidr",
                                  ],
                                  "type": "object",
                                },
                                "securityGroup": Object {
                                  "description": "SecurityGroup defines a SecurityGroup peer. If specified, none of the other fields can be set.",
                                  "properties": Object {
                                    "groupID": Object {
                                      "description": "GroupID is the EC2 SecurityGroupID.",
                                      "type": "string",
                                    },
                                  },
                                  "required": Array [
                                    "groupID",
                                  ],
                                  "type": "object",
                                },
                              },
                              "type": "object",
                            },
                            "type": "array",
                          },
                          "ports": Object {
                            "description": "List of ports which should be made accessible on the targets in TargetGroup. If ports is empty or unspecified, it defaults to all ports with TCP.",
                            "items": Object {
                              "properties": Object {
                                "port": Object {
                                  "anyOf": Array [
                                    Object {
                                      "type": "integer",
                                    },
                                    Object {
                                      "type": "string",
                                    },
                                  ],
                                  "description": "The port which traffic must match. When NodePort endpoints(instance TargetType) is used, this must be a numerical port. When Port endpoints(ip TargetType) is used, this can be either numerical or named port on pods. if port is unspecified, it defaults to all ports.",
                                  "x-kubernetes-int-or-string": true,
                                },
                                "protocol": Object {
                                  "description": "The protocol which traffic must match. If protocol is unspecified, it defaults to TCP.",
                                  "enum": Array [
                                    "TCP",
                                    "UDP",
                                  ],
                                  "type": "string",
                                },
                              },
                              "type": "object",
                            },
                            "type": "array",
                          },
                        },
                        "required": Array [
                          "from",
                          "ports",
                        ],
                        "type": "object",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
                "serviceRef": Object {
                  "description": "serviceRef is a reference to a Kubernetes Service and ServicePort.",
                  "properties": Object {
                    "name": Object {
                      "description": "Name is the name of the Service.",
                      "type": "string",
                    },
                    "port": Object {
                      "anyOf": Array [
                        Object {
                          "type": "integer",
                        },
                        Object {
                          "type": "string",
                        },
                      ],
                      "description": "Port is the port of the ServicePort.",
                      "x-kubernetes-int-or-string": true,
                    },
                  },
                  "required": Array [
                    "name",
                    "port",
                  ],
                  "type": "object",
                },
                "targetGroupARN": Object {
                  "description": "targetGroupARN is the Amazon Resource Name (ARN) for the TargetGroup.",
                  "type": "string",
                },
                "targetType": Object {
                  "description": "targetType is the TargetType of TargetGroup. If unspecified, it will be automatically inferred.",
                  "enum": Array [
                    "instance",
                    "ip",
                  ],
                  "type": "string",
                },
              },
              "required": Array [
                "serviceRef",
                "targetGroupARN",
              ],
              "type": "object",
            },
            "status": Object {
              "description": "TargetGroupBindingStatus defines the observed state of TargetGroupBinding",
              "properties": Object {
                "observedGeneration": Object {
                  "description": "The generation observed by the TargetGroupBinding controller.",
                  "format": "int64",
                  "type": "integer",
                },
              },
              "type": "object",
            },
          },
          "type": "object",
        },
      },
      "version": "v1alpha1",
      "versions": Array [
        Object {
          "name": "v1alpha1",
          "served": true,
          "storage": false,
        },
        Object {
          "name": "v1beta1",
          "served": true,
          "storage": true,
        },
      ],
    },
  },
  Object {
    "apiVersion": "admissionregistration.k8s.io/v1beta1",
    "kind": "MutatingWebhookConfiguration",
    "metadata": Object {
      "annotations": Object {
        "cert-manager.io/inject-ca-from": "kube-system/aws-load-balancer-serving-cert",
      },
      "labels": Object {
        "app.kubernetes.io/name": "aws-load-balancer-controller",
      },
      "name": "aws-load-balancer-webhook",
    },
    "webhooks": Array [
      Object {
        "clientConfig": Object {
          "caBundle": "Cg==",
          "service": Object {
            "name": "aws-load-balancer-webhook-service",
            "namespace": "kube-system",
            "path": "/mutate-v1-pod",
          },
        },
        "failurePolicy": "Fail",
        "name": "mpod.elbv2.k8s.aws",
        "namespaceSelector": Object {
          "matchExpressions": Array [
            Object {
              "key": "elbv2.k8s.aws/pod-readiness-gate-inject",
              "operator": "In",
              "values": Array [
                "enabled",
              ],
            },
          ],
        },
        "rules": Array [
          Object {
            "apiGroups": Array [
              "",
            ],
            "apiVersions": Array [
              "v1",
            ],
            "operations": Array [
              "CREATE",
            ],
            "resources": Array [
              "pods",
            ],
          },
        ],
        "sideEffects": "None",
      },
      Object {
        "clientConfig": Object {
          "caBundle": "Cg==",
          "service": Object {
            "name": "aws-load-balancer-webhook-service",
            "namespace": "kube-system",
            "path": "/mutate-elbv2-k8s-aws-v1beta1-targetgroupbinding",
          },
        },
        "failurePolicy": "Fail",
        "name": "mtargetgroupbinding.elbv2.k8s.aws",
        "rules": Array [
          Object {
            "apiGroups": Array [
              "elbv2.k8s.aws",
            ],
            "apiVersions": Array [
              "v1beta1",
            ],
            "operations": Array [
              "CREATE",
              "UPDATE",
            ],
            "resources": Array [
              "targetgroupbindings",
            ],
          },
        ],
        "sideEffects": "None",
      },
    ],
  },
  Object {
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": Object {
      "labels": Object {
        "app.kubernetes.io/component": "controller",
        "app.kubernetes.io/name": "aws-load-balancer-controller",
      },
      "name": "aws-load-balancer-controller",
      "namespace": "kube-system",
    },
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "Role",
    "metadata": Object {
      "labels": Object {
        "app.kubernetes.io/name": "aws-load-balancer-controller",
      },
      "name": "aws-load-balancer-controller-leader-election-role",
      "namespace": "kube-system",
    },
    "rules": Array [
      Object {
        "apiGroups": Array [
          "",
        ],
        "resources": Array [
          "configmaps",
        ],
        "verbs": Array [
          "create",
        ],
      },
      Object {
        "apiGroups": Array [
          "",
        ],
        "resourceNames": Array [
          "aws-load-balancer-controller-leader",
        ],
        "resources": Array [
          "configmaps",
        ],
        "verbs": Array [
          "get",
          "update",
          "patch",
        ],
      },
    ],
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": Object {
      "labels": Object {
        "app.kubernetes.io/name": "aws-load-balancer-controller",
      },
      "name": "aws-load-balancer-controller-role",
    },
    "rules": Array [
      Object {
        "apiGroups": Array [
          "",
        ],
        "resources": Array [
          "endpoints",
        ],
        "verbs": Array [
          "get",
          "list",
          "watch",
        ],
      },
      Object {
        "apiGroups": Array [
          "",
        ],
        "resources": Array [
          "events",
        ],
        "verbs": Array [
          "create",
          "patch",
        ],
      },
      Object {
        "apiGroups": Array [
          "",
        ],
        "resources": Array [
          "namespaces",
        ],
        "verbs": Array [
          "get",
          "list",
          "watch",
        ],
      },
      Object {
        "apiGroups": Array [
          "",
        ],
        "resources": Array [
          "nodes",
        ],
        "verbs": Array [
          "get",
          "list",
          "watch",
        ],
      },
      Object {
        "apiGroups": Array [
          "",
        ],
        "resources": Array [
          "pods",
        ],
        "verbs": Array [
          "get",
          "list",
          "watch",
        ],
      },
      Object {
        "apiGroups": Array [
          "",
        ],
        "resources": Array [
          "pods/status",
        ],
        "verbs": Array [
          "patch",
          "update",
        ],
      },
      Object {
        "apiGroups": Array [
          "",
        ],
        "resources": Array [
          "secrets",
        ],
        "verbs": Array [
          "get",
          "list",
          "watch",
        ],
      },
      Object {
        "apiGroups": Array [
          "",
        ],
        "resources": Array [
          "services",
        ],
        "verbs": Array [
          "get",
          "list",
          "patch",
          "update",
          "watch",
        ],
      },
      Object {
        "apiGroups": Array [
          "",
        ],
        "resources": Array [
          "services/status",
        ],
        "verbs": Array [
          "patch",
          "update",
        ],
      },
      Object {
        "apiGroups": Array [
          "elbv2.k8s.aws",
        ],
        "resources": Array [
          "targetgroupbindings",
        ],
        "verbs": Array [
          "create",
          "delete",
          "get",
          "list",
          "patch",
          "update",
          "watch",
        ],
      },
      Object {
        "apiGroups": Array [
          "elbv2.k8s.aws",
        ],
        "resources": Array [
          "targetgroupbindings/status",
        ],
        "verbs": Array [
          "patch",
          "update",
        ],
      },
      Object {
        "apiGroups": Array [
          "extensions",
        ],
        "resources": Array [
          "ingresses",
        ],
        "verbs": Array [
          "get",
          "list",
          "patch",
          "update",
          "watch",
        ],
      },
      Object {
        "apiGroups": Array [
          "extensions",
        ],
        "resources": Array [
          "ingresses/status",
        ],
        "verbs": Array [
          "patch",
          "update",
        ],
      },
      Object {
        "apiGroups": Array [
          "networking.k8s.io",
        ],
        "resources": Array [
          "ingresses",
        ],
        "verbs": Array [
          "get",
          "list",
          "patch",
          "update",
          "watch",
        ],
      },
      Object {
        "apiGroups": Array [
          "networking.k8s.io",
        ],
        "resources": Array [
          "ingresses/status",
        ],
        "verbs": Array [
          "patch",
          "update",
        ],
      },
    ],
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "RoleBinding",
    "metadata": Object {
      "labels": Object {
        "app.kubernetes.io/name": "aws-load-balancer-controller",
      },
      "name": "aws-load-balancer-controller-leader-election-rolebinding",
      "namespace": "kube-system",
    },
    "roleRef": Object {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "Role",
      "name": "aws-load-balancer-controller-leader-election-role",
    },
    "subjects": Array [
      Object {
        "kind": "ServiceAccount",
        "name": "aws-load-balancer-controller",
        "namespace": "kube-system",
      },
    ],
  },
  Object {
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": Object {
      "labels": Object {
        "app.kubernetes.io/name": "aws-load-balancer-controller",
      },
      "name": "aws-load-balancer-controller-rolebinding",
    },
    "roleRef": Object {
      "apiGroup": "rbac.authorization.k8s.io",
      "kind": "ClusterRole",
      "name": "aws-load-balancer-controller-role",
    },
    "subjects": Array [
      Object {
        "kind": "ServiceAccount",
        "name": "aws-load-balancer-controller",
        "namespace": "kube-system",
      },
    ],
  },
  Object {
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": Object {
      "labels": Object {
        "app.kubernetes.io/name": "aws-load-balancer-controller",
      },
      "name": "aws-load-balancer-webhook-service",
      "namespace": "kube-system",
    },
    "spec": Object {
      "ports": Array [
        Object {
          "port": 443,
          "targetPort": 9443,
        },
      ],
      "selector": Object {
        "app.kubernetes.io/component": "controller",
        "app.kubernetes.io/name": "aws-load-balancer-controller",
      },
    },
  },
  Object {
    "apiVersion": "apps/v1",
    "kind": "Deployment",
    "metadata": Object {
      "labels": Object {
        "app.kubernetes.io/component": "controller",
        "app.kubernetes.io/name": "aws-load-balancer-controller",
      },
      "name": "aws-load-balancer-controller",
      "namespace": "kube-system",
    },
    "spec": Object {
      "replicas": 0,
      "selector": Object {
        "matchLabels": Object {
          "app.kubernetes.io/component": "controller",
          "app.kubernetes.io/name": "aws-load-balancer-controller",
        },
      },
      "template": Object {
        "metadata": Object {
          "labels": Object {
            "app.kubernetes.io/component": "controller",
            "app.kubernetes.io/name": "aws-load-balancer-controller",
          },
        },
        "spec": Object {
          "containers": Array [
            Object {
              "args": Array [
                "--ingress-class=alb",
                "--cluster-name=TestClusterName",
                "--test=123",
              ],
              "env": Array [
                Object {
                  "name": "testEnv",
                  "value": "12345",
                },
              ],
              "image": "docker.io/amazon/aws-alb-ingress-controller:v2.0.0",
              "livenessProbe": Object {
                "failureThreshold": 2,
                "httpGet": Object {
                  "path": "/healthz",
                  "port": 61779,
                  "scheme": "HTTP",
                },
                "initialDelaySeconds": 30,
                "timeoutSeconds": 10,
              },
              "name": "controller",
              "ports": Array [
                Object {
                  "containerPort": 9443,
                  "name": "webhook-server",
                  "protocol": "TCP",
                },
              ],
              "resources": Object {
                "limits": Object {
                  "cpu": "200m",
                  "memory": "500Mi",
                },
                "requests": Object {
                  "cpu": "100m",
                  "memory": "200Mi",
                },
              },
              "securityContext": Object {
                "allowPrivilegeEscalation": false,
                "readOnlyRootFilesystem": true,
                "runAsNonRoot": true,
              },
              "volumeMounts": Array [
                Object {
                  "mountPath": "/tmp/k8s-webhook-server/serving-certs",
                  "name": "cert",
                  "readOnly": true,
                },
              ],
            },
          ],
          "securityContext": Object {
            "fsGroup": 1337,
          },
          "serviceAccountName": "aws-load-balancer-controller",
          "terminationGracePeriodSeconds": 10,
          "volumes": Array [
            Object {
              "name": "cert",
              "secret": Object {
                "defaultMode": 420,
                "secretName": "aws-load-balancer-webhook-tls",
              },
            },
          ],
        },
      },
    },
  },
  Object {
    "apiVersion": "cert-manager.io/v1alpha2",
    "kind": "Certificate",
    "metadata": Object {
      "labels": Object {
        "app.kubernetes.io/name": "aws-load-balancer-controller",
      },
      "name": "aws-load-balancer-serving-cert",
      "namespace": "kube-system",
    },
    "spec": Object {
      "dnsNames": Array [
        "aws-load-balancer-webhook-service.kube-system.svc",
        "aws-load-balancer-webhook-service.kube-system.svc.cluster.local",
      ],
      "issuerRef": Object {
        "kind": "Issuer",
        "name": "aws-load-balancer-selfsigned-issuer",
      },
      "secretName": "aws-load-balancer-webhook-tls",
    },
  },
  Object {
    "apiVersion": "cert-manager.io/v1alpha2",
    "kind": "Issuer",
    "metadata": Object {
      "labels": Object {
        "app.kubernetes.io/name": "aws-load-balancer-controller",
      },
      "name": "aws-load-balancer-selfsigned-issuer",
      "namespace": "kube-system",
    },
    "spec": Object {
      "selfSigned": Object {},
    },
  },
  Object {
    "apiVersion": "admissionregistration.k8s.io/v1beta1",
    "kind": "ValidatingWebhookConfiguration",
    "metadata": Object {
      "annotations": Object {
        "cert-manager.io/inject-ca-from": "kube-system/aws-load-balancer-serving-cert",
      },
      "labels": Object {
        "app.kubernetes.io/name": "aws-load-balancer-controller",
      },
      "name": "aws-load-balancer-webhook",
    },
    "webhooks": Array [
      Object {
        "clientConfig": Object {
          "caBundle": "Cg==",
          "service": Object {
            "name": "aws-load-balancer-webhook-service",
            "namespace": "kube-system",
            "path": "/validate-elbv2-k8s-aws-v1beta1-targetgroupbinding",
          },
        },
        "failurePolicy": "Fail",
        "name": "vtargetgroupbinding.elbv2.k8s.aws",
        "rules": Array [
          Object {
            "apiGroups": Array [
              "elbv2.k8s.aws",
            ],
            "apiVersions": Array [
              "v1beta1",
            ],
            "operations": Array [
              "CREATE",
              "UPDATE",
            ],
            "resources": Array [
              "targetgroupbindings",
            ],
          },
        ],
        "sideEffects": "None",
      },
    ],
  },
]
`;
